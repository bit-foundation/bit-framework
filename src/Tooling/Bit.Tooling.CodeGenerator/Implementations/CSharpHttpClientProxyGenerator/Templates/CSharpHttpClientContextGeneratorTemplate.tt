<#@ template language="C#" #>
<#@ parameter type="System.Collections.Generic.IList<DtoController>" name="Controllers" #>
<#@ parameter type="Bit.Tooling.Core.Model.BitCodeGeneratorMapping" name="Mapping" #>
<#@ parameter type="System.String" name="BitToolingVersion" #>
<#@ import namespace="Bit.Tooling.Core.Model" #>
<#@ import namespace="Microsoft.CodeAnalysis" #>
<#@ import namespace="System.Linq" #>

using Bit.Http.Implementations;
using System.Collections.Generic;
using Bit.Core.Implementations;
using System.Text;
using System.Threading.Tasks;
using System.Threading;
using System.IO;
using Bit.Http.Contracts;

namespace System.Net.Http
{
	<# foreach (DtoController controller in Controllers) { #>
		<# if (controller.ModelSymbol.ContainingNamespace.Name == "Auto")
		{ #>
			namespace Auto { [System.CodeDom.Compiler.GeneratedCode("BitCodeGenerator", "<#= BitToolingVersion #>")] public class <#= controller.ModelSymbol.Name #> : Bit.Model.Contracts.IDto { public System.Guid Id { get; set; } } }
		<# } #>
	<# } #>

	[System.CodeDom.Compiler.GeneratedCode("BitCodeGenerator", "<#= BitToolingVersion #>")]
    public static class <#= Mapping.Route #>ContextExt
    {
		<# foreach (DtoController controller in Controllers) { #>

			public static ODataHttpClient<<#= controller.ModelSymbol.ToDisplayString() #>> <#= controller.Name #>(this HttpClient httpClient)
			{
				return new ODataHttpClient<<#= controller.ModelSymbol.ToDisplayString() #>>(httpClient, "<#= controller.Name #>" , "<#= Mapping.Route #>" );
			}

			<# foreach (ODataOperation operation in controller.Operations) { #>

				public static async Task<#= operation.Method.ReturnType.IsVoid() ? string.Empty : $"<{operation.Method.ReturnType.GetCSharpTypeName()}>" #> <#= operation.Method.Name #>(this <#= string.Join(",", new string[]{ $@"ODataHttpClient<{controller.ModelSymbol.ToDisplayString()}> {controller.Name.AsCamelCase()}Controller" }.Union(operation.Parameters.Select(parameter =>  $@"{parameter.Type.ToDisplayString()} {parameter.Name}" )).Union(new []{"ODataContext? oDataContext = default" , "CancellationToken cancellationToken = default"})) #>)
				{
					string qs = oDataContext?.Query is not null ? $"?{oDataContext.Query}" : string.Empty;
					string requestUri = $"odata/<#= Mapping.Route #>/<#= controller.Name #>/<#= operation.Method.Name #>(<#= operation.ParametersUri #>){qs}";
					using HttpRequestMessage request = new HttpRequestMessage(<#= operation.Kind == ODataOperationKind.Action ? "HttpMethod.Post" : "HttpMethod.Get" #>, requestUri);
					<# if (operation.Kind == ODataOperationKind.Action)
					{ #>
						request.Content = new StringContent(DefaultJsonContentFormatter.Current.Serialize(new 
						{ 
							<#= string.Join(",", operation.Parameters.Select(parameter =>  $"{parameter.Name}" )) #>
						}), Encoding.UTF8, DefaultJsonContentFormatter.Current.ContentType);
					<# } #>
					using HttpResponseMessage response = (await <#= $"{controller.Name.AsCamelCase()}Controller" #>.HttpClient.SendAsync(request, cancellationToken)).EnsureSuccessStatusCode();
					<# if (!operation.Method.ReturnType.IsVoid())
					{ #>
						using Stream responseStream = await response.Content.ReadAsStreamAsync(cancellationToken);
						var oDataResponse = await <#= $"{controller.Name.AsCamelCase()}Controller" #>.DeserializeAsync<<#= operation.Method.ReturnType.GetCSharpTypeName() #>>(responseStream, oDataContext, cancellationToken);
						return oDataResponse;
					<# } #>
				}

			<# } #>

		<# } #>
    }
}